
import os
import time
from datetime import datetime
from telethon.sync import TelegramClient
from telethon.errors import RPCError
from telethon.errors.rpcerrorlist import UsernameNotOccupiedError, PeerIdInvalidError
import gspread
from google.oauth2.service_account import Credentials

# === CONFIG ===
api_id = 22483560
api_hash = 'b0d6834ddeb4927dbf4de8713fb8c96c'
session_name = 'wontot_session'
sleep_sec = 65

# Google Sheets settings
spreadsheet_id = '13WJZwc0fGYqrzDq3XYYu_IFEooX81LVaW6oI5LdvTxE'
sheet_name = 'Sheet1'
json_keyfile = 'wontotsender-62f0d9912f01.json'

# === AUTH ===
scopes = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_file(json_keyfile, scopes=scopes)
gc = gspread.authorize(credentials)
sh = gc.open_by_key(spreadsheet_id)
sheet = sh.worksheet(sheet_name)

client = TelegramClient(session_name, api_id, api_hash)

message_text = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –ú–∞—Ä–∏—è
–ü–∏—à—É –≤–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –≤–∞—à–∏–º –ø–∞–±–ª–∏–∫–æ–º –∏–ª–∏ –ø–∞–±–ª–∏–∫–∞–º–∏, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ –æ–¥–∏–Ω.

–Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ @wontot_bot 
–ú—ã –¥–µ–ª–∞–µ–º "–ü–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –º–µ–∂–¥—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ –ø–∞–±–ª–∏–∫–∞–º–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑–∞–º –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏" —Å –ø—Ä–∏–∑–æ–≤—ã–º —Ñ–æ–Ω–¥–æ–º 1000 USDT –∏ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –¥–æ 5000.

–•–æ—Ç–∏–º –≤–∞—Å –∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
–ù–∞ —ç—Ç–∞–ø–µ –æ—Ç–±–æ—Ä–∞ –º—ã –≤–∞–º —Å–æ–∑–¥–∞–¥–∏–º –∞—Ä–µ–Ω—É, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å 5 –ª—É—á—à–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç–æ–≤ —Å—Ä–µ–¥–∏ –≤–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –ø–æ–ø–∞–¥—É—Ç –≤ —Ñ–∏–Ω–∞–ª –∏ —Ä–∞–∑—ã–≥—Ä–∞—é—Ç —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö —Ñ–∏–Ω–∞–ª–∏—Å—Ç–æ–≤ 1000 usdt. –ü—Ä–∏–º–µ—Ä –∞—Ä–µ–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ: 
https://t.me/WONToT_bot/app?startapp=arena_IPVpysGPyKhLLoDgFT2f::@wontot_bot_arena

–ù–∏–∫–∞–∫–∏—Ö –≤–∑–Ω–æ—Å–æ–≤, –¥–æ–Ω–∞—Ç–æ–≤, –æ–ø–ª–∞—Ç –∏ –Ω–∏–∫–∞–∫–æ–π —Ä–µ–∫–ª–∞–º—ã.
–ï—Å–ª–∏ —É –≤–∞—Å –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É üòä

–ê—É–¥–∏–æ/–í–∏–¥–µ–æ –ø—Ä–µ–∑–∞:
https://youtu.be/E6cRFd6EdgU?si=xs7oHNvu5igkXaaY 
–õ–µ–Ω–¥–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞:
https://tg-football-cup-1-xdocvmc.gamma.site"""


def get_archived_usernames():
    try:
        records = sheet.get_all_records()
        return set(str(row['username']).strip() for row in records if row['username'])
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ –∏–∑ Google Sheets: {str(e)}")
        return set()


def update_archive(username, status="success"):
    try:
        sheet.append_row([username, status, datetime.now().isoformat()])
        print(f"[ARCHIVE ‚úÖ] –î–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets: {username}")
    except Exception as e:
        print(f"[ARCHIVE ‚ùå] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {username}: {str(e)}")


def load_usernames(filename="usernames.txt"):
    if not os.path.exists(filename):
        print("[ERROR] –ù–µ—Ç —Ñ–∞–π–ª–∞ usernames.txt")
        return []
    with open(filename, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip().startswith("@")]


async def main():
    usernames = load_usernames()
    archive = get_archived_usernames()

    for username in usernames:
        if username in archive:
            print(f"[SKIP] –£–∂–µ –≤ –∞—Ä—Ö–∏–≤–µ (Google Sheets): {username}")
            continue

        update_archive(username)

        try:
            print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {username}")
            await client.send_message(username, message_text)
            time.sleep(sleep_sec)
        except RPCError as e:
            if "Flood" in str(e):
                print(f"[WAIT] FloodWait: –∂–¥—ë–º 60 —Å–µ–∫ (–æ–±—â–µ–µ RPC –∏—Å–∫–ª—é—á–µ–Ω–∏–µ).")
                time.sleep(60)
            else:
                print(f"[RPCError] {username}: {str(e)}")
                update_archive(username, f"rpc_error:{str(e)}")
        except UsernameNotOccupiedError:
            print(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω: {username}")
            update_archive(username, "not_found")
        except PeerIdInvalidError:
            print(f"[ERROR] PeerIdInvalid: {username}")
            update_archive(username, "peer_invalid")
        except Exception as e:
            print(f"[ERROR] {username}: {str(e)}")
            update_archive(username, f"error:{str(e)}")

with client:
    client.loop.run_until_complete(main())
